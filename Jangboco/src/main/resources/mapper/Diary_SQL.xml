<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Diary">
	<select id="getDisctList" resultType="hashmap">
		SELECT DISCT_NO, DISCT_NAME
		FROM DISCT
		ORDER BY DISCT_NAME
	</select>
	
	<select id="getMarketList" parameterType="hashmap" resultType="hashmap">
		SELECT MARKET_NO, MARKET_NAME
		FROM MARKET
		WHERE DISCT_NO = #{disctNo}
		AND MARKET_NAME LIKE '%' || #{searchMarketName} ||'%'
		ORDER BY MARKET_NAME
	</select>
	
	<select id="getBranchList" parameterType="hashmap" resultType="hashmap">
		SELECT BRANCH_NAME
		FROM MARKET_MEMBER MM
		WHERE MARKET_NO = #{marketNo}
		ORDER BY BRANCH_NAME
	</select>
	
	<select id="getItemsList" parameterType="hashmap" resultType="hashmap">
		SELECT ITEMS_NO, ITEMS_NAME, IMG_URL
		FROM (
				SELECT I.ITEMS_NO, I.ITEMS_NAME, I.IMG_URL
				FROM ITEMS I
				JOIN (
						SELECT ITEMS_NO
						FROM PRICES
						WHERE MARKET_NO = #{marketNo}
						AND UPDATE_DATE = (
											SELECT UPDATE_DATE
											FROM (
													SELECT UPDATE_DATE, MARKET_NO, ROW_NUMBER() OVER(ORDER BY UPDATE_DATE DESC) AS RNUM
													FROM PRICES
													WHERE MARKET_NO = #{marketNo}
												 )
											WHERE RNUM = 1
										  )
					 ) P
				ON I.ITEMS_NO = P.ITEMS_NO
			 )
		WHERE ITEMS_NAME LIKE '%' || #{searchItemsName} ||'%'
		ORDER BY ITEMS_NAME
	</select>
		
	<select id="hastgDuplctCheck" parameterType="String" resultType="Integer">
		SELECT COUNT(*)
		FROM HASTG
		WHERE HASTG_NAME = #{hastgName}
	</select>
	
	<insert id="addHastgData" parameterType="hashmap">
		INSERT INTO HASTG (HASTG_NO, MEMBER_NO, HASTG_NAME)
		VALUES (HASTG_SEQ.NEXTVAL, #{memberNo}, #{hastgName})
	</insert>
	
	<select id="getHastgNo" parameterType="String" resultType="Integer">
		SELECT HASTG_NO
		FROM HASTG
		WHERE HASTG_NAME = #{hastgName}
	</select>
	
	<update id="addDiaryData" parameterType="hashmap">
		INSERT ALL
		INTO DIARY (DIARY_NO, MEMBER_NO, CON)
		VALUES (DIARY_SEQ.NEXTVAL, #{memberNo}, #{con})
		<foreach collection="hastgNoList" item="hastgNo" separator=" ">
			INTO DIARY_HASTG (DIARY_NO, HASTG_NO, DIARY_HASTG_NO)
			VALUES (DIARY_SEQ.CURRVAL, #{hastgNo}, GET_DIARY_HASTG_SEQ_NEXTVAL)
		</foreach>
		<foreach collection="diaryImgList" item="diaryImgData" separator=" ">
			INTO DIARY_IMG (IMG_NO, DIARY_NO, IMG_URL)
			VALUES (GET_DIARY_IMG_SEQ_NEXTVAL, DIARY_SEQ.CURRVAL, #{diaryImgData.diaryImgUrl})
			<foreach collection="diaryImgData.itemTaglist" item="itemTagData" separator=" ">
				INTO ITEM_TAG
				VALUES (GET_ITEM_TAG_SEQ_NEXTVAL, #{itemTagData.marketNo}, #{itemTagData.itemsNo}, GET_DIARY_IMG_SEQ_CURRVAL,
						#{itemTagData.cost}, #{itemTagData.buyQnt}, #{itemTagData.marketName}, #{itemTagData.itemsName})
				<if test="itemTagData.addToAccbkFlag eq 1">
				INTO ACCBK (ACCBK_NO, MEMBER_NO, MARKET_NO, ITEMS_NO, COST, BUY_QNT, BUY_DATE, MARKET_NAME, ITEMS_NAME)
				VALUES (GET_ACCBK_SEQ_NEXTVAL, #{memberNo}, #{itemTagData.marketNo}, #{itemTagData.itemsNo},
						#{itemTagData.cost}, #{itemTagData.buyQnt}, #{itemTagData.buyDate}, #{itemTagData.marketName}, #{itemTagData.itemsName})
				</if>
			</foreach>
		</foreach>
		SELECT * FROM DUAL
	</update>
	
	<select id="getDiaryData" parameterType="hashmap" resultType="hashmap">
		SELECT D.DIARY_NO, D.MEMBER_NO, D.CON, D.HIT_NUM, (	SELECT COUNT(*)
															FROM DIARY_LIKE
															WHERE DIARY_NO = D.DIARY_NO
														  ) AS DIARY_LIKE,
			   M.NICNM, M.IMG_URL
		FROM DIARY D
		JOIN MEMBER M
		ON D.MEMBER_NO = M.MEMBER_NO
		AND D.DIARY_NO = #{diaryNo}
		AND D.DEL_FLAG = 0
	</select>
	
	<select id="getDiaryImgListOnDiary" parameterType="hashmap" resultType="hashmap">
		SELECT IMG_NO, IMG_URL
		FROM DIARY_IMG
		WHERE DIARY_NO = #{diaryNo}
		ORDER BY IMG_NO
	</select>
	
	<select id="getItemTagListOnDiary" parameterType="Integer" resultType="hashmap">
		SELECT IT.ITEM_TAG_NO, NVL2(IT.MARKET_NO, IT.MARKET_NO, M.MARKET_NO) AS MARKET_NO,
			   NVL2(IT.ITEMS_NO, IT.ITEMS_NO, I.ITEMS_NO) AS ITEMS_NO, IT.IMG_NO, IT.COST, IT.BUY_QNT,
			   NVL2(IT.MARKET_NAME, IT.MARKET_NAME, M.MARKET_NAME) AS MARKET_NAME,
			   NVL2(IT.ITEMS_NAME, IT.ITEMS_NAME, I.ITEMS_NAME) AS ITEMS_NAME
		FROM ITEM_TAG IT
		LEFT OUTER JOIN MARKET M
					 ON IT.MARKET_NO = M.MARKET_NO
		LEFT OUTER JOIN ITEMS I
					 ON IT.ITEMS_NO = I.ITEMS_NO
		WHERE IT.IMG_NO = #{imgNo}
	</select>
	
	<insert id="addDiaryAccuse" parameterType="hashmap">
		INSERT INTO DIARY_ACCUSE (ACCUSE_NO, DIARY_NO, REQ_MEMBER_NO, REASON_CODE, TITLE, CON)
		VALUES (DIARY_ACCUSE_SEQ.NEXTVAL, #{diaryNo}, #{memberNo}, #{reasonCode}, #{title}, #{con})
	</insert>
	
	<select id="getProfileDiaryList" parameterType="hashmap" resultType="hashmap">
		SELECT DIARY_NO, IMG_URL
		FROM (  SELECT DIARY_NO, IMG_URL, RANK() OVER(PARTITION BY DIARY_NO ORDER BY IMG_NO) AS IMG_IDX
		        FROM DIARY_IMG
		        WHERE DIARY_NO IN ( SELECT DIARY_NO
		                            FROM (
		                                    SELECT DIARY_NO, ROW_NUMBER() OVER(ORDER BY DIARY_NO DESC) AS RNUM
		                                    FROM DIARY
		                                    WHERE MEMBER_NO = ( SELECT D.MEMBER_NO
		                                                        FROM MEMBER M
		                                                        JOIN DIARY D
		                                                        ON M.MEMBER_NO = D.MEMBER_NO
		                                                        AND D.DIARY_NO = #{diaryNo}
		                                                      )
		                                    AND DEL_FLAG = 0
		                                 )
		                            WHERE RNUM <![CDATA[<=]]> 4
		                          )
		)
		WHERE IMG_IDX = 1
		ORDER BY DIARY_NO DESC
	</select>
	
	<select id="checkDiaryLike" parameterType="hashmap" resultType="Integer">
		SELECT COUNT(*)
		FROM DIARY_LIKE
		WHERE MEMBER_NO = #{memberNo}
		AND DIARY_NO = #{diaryNo}
	</select>
	
	<select id="cntDiaryLike" parameterType="hashmap" resultType="Integer">
		SELECT COUNT(*)
		FROM DIARY_LIKE
		WHERE DIARY_NO = #{diaryNo}
	</select>
	
	<insert id="diaryLike" parameterType="hashmap">
		INSERT INTO DIARY_LIKE (MEMBER_NO, DIARY_NO)
		VALUES (#{memberNo}, #{diaryNo})
	</insert>
	
	<delete id="diaryUnlike" parameterType="hashmap">
		DELETE FROM DIARY_LIKE
		WHERE MEMBER_NO = #{memberNo}
		AND DIARY_NO = #{diaryNo}
	</delete>
	
	<insert id="addDiaryAccuseData" parameterType="hashmap">
		INSERT INTO DIARY_ACCUSE (ACCUSE_NO, DIARY_NO, REQ_MEMBER_NO, REASON_CODE, TITLE, CON)
		VALUES (DIARY_ACCUSE_SEQ.NEXTVAL, #{diaryNo}, #{memberNo}, #{reasonCode}, #{title}, #{con})
	</insert>
	
	<select id="checkDiaryFolw" parameterType="hashmap" resultType="Integer">
		SELECT COUNT(*)
		FROM FOLW
		WHERE REQ_MEMBER_NO = #{memberNo}
		AND TARGET_MEMBER_NO = (SELECT D.MEMBER_NO
		                        FROM MEMBER M
		                        JOIN DIARY D
		                        ON M.MEMBER_NO = D.MEMBER_NO
		                        AND D.DIARY_NO = #{diaryNo}
		                       )
	</select>
	
	<insert id="diaryFolw" parameterType="hashmap">
		INSERT INTO FOLW (FOLW_NO, REQ_MEMBER_NO, TARGET_MEMBER_NO)
		VALUES (FOLW_SEQ.NEXTVAL, #{reqMemberNo}, #{targetMemberNo})
	</insert>
	
	<delete id="diaryUnfolw" parameterType="hashmap">
		DELETE FROM FOLW
		WHERE REQ_MEMBER_NO = #{reqMemberNo}
		AND TARGET_MEMBER_NO = #{targetMemberNo}
	</delete>
	
	<select id="getHastgList" parameterType="hashmap" resultType="hashmap">
		SELECT H.HASTG_NO, H.HASTG_NAME
		FROM HASTG H
		JOIN DIARY_HASTG DH
		ON H.HASTG_NO = DH.HASTG_NO
		AND DH.DIARY_NO = #{diaryNo}
		AND H.DEL_FLAG = 0
		ORDER BY DIARY_HASTG_NO
	</select>
	
	<select id="getComntList" parameterType="hashmap" resultType="hashmap">
		SELECT C.COMNT_NO, C.MEMBER_NO, M.IMG_URL, M.NICNM, C.CON, (SELECT COUNT(*)
																	FROM COMNT_LIKE
																	WHERE COMNT_NO = C.COMNT_NO
																   ) AS COMNT_LIKE
		FROM COMNT C
		JOIN MEMBER M
		ON C.MEMBER_NO = M.MEMBER_NO
		WHERE DIARY_NO = #{diaryNo}
		AND PARENT_COMNT_NO IS NULL
		AND DEL_FLAG = 0
		ORDER BY COMNT_NO
	</select>
	
	<select id="getRecomntList" parameterType="Integer" resultType="hashmap">
		SELECT C.COMNT_NO, C.MEMBER_NO, M.IMG_URL, M.NICNM, C.CON, (SELECT COUNT(*)
																	FROM COMNT_LIKE
																	WHERE COMNT_NO = C.COMNT_NO
																   ) AS COMNT_LIKE
		FROM COMNT C
		JOIN MEMBER M
		ON C.MEMBER_NO = M.MEMBER_NO
		WHERE PARENT_COMNT_NO = #{parentComntNo}
		AND DEL_FLAG = 0
		ORDER BY COMNT_NO
	</select>
	
	<select id="cntRecomnt" parameterType="hashmap" resultType="Integer">
		SELECT COUNT(*)
		FROM COMNT
		WHERE PARENT_COMNT_NO = #{parentComntNo}
		AND DEL_FLAG = 0
	</select>
	
	<select id="checkComntLike" parameterType="hashmap" resultType="Integer">
		SELECT COUNT(*)
		FROM COMNT_LIKE
		WHERE MEMBER_NO = #{memberNo}
		AND COMNT_NO = #{comntNo}
	</select>
	
	<select id="cntComntLike" parameterType="hashmap" resultType="Integer">
		SELECT COUNT(*)
		FROM COMNT_LIKE
		WHERE COMNT_NO = #{comntNo}
	</select>
	
	<insert id="comntLike" parameterType="hashmap">
		INSERT INTO COMNT_LIKE (MEMBER_NO, COMNT_NO)
		VALUES (#{memberNo}, #{comntNo})
	</insert>
	
	<delete id="comntUnlike" parameterType="hashmap">
		DELETE FROM COMNT_LIKE
		WHERE MEMBER_NO = #{memberNo}
		AND COMNT_NO = #{comntNo}
	</delete>
	
	<insert id="addComntAccuseData" parameterType="hashmap">
		INSERT INTO COMNT_ACCUSE (ACCUSE_NO, COMNT_NO, REQ_MEMBER_NO, REASON_CODE, TITLE, CON)
		VALUES (COMNT_ACCUSE_SEQ.NEXTVAL, #{comntNo}, #{memberNo}, #{reasonCode}, #{title}, #{con})
	</insert>
	
	<insert id="addComntData" parameterType="hashmap">
		INSERT INTO COMNT (COMNT_NO, DIARY_NO, MEMBER_NO, PARENT_COMNT_NO, CON)
		VALUES (COMNT_SEQ.NEXTVAL, #{diaryNo}, #{memberNo}, #{parentComntNo}, #{con})
	</insert>
	
	<delete id="resetDiaryHastg" parameterType="hashmap">
		DELETE FROM DIARY_HASTG
		WHERE DIARY_NO = #{diaryNo}
	</delete>
	
	<delete id="resetItemTag" parameterType="hashmap">
		DELETE FROM ITEM_TAG
		WHERE IMG_NO IN (	SELECT IMG_NO
							FROM DIARY_IMG
							WHERE DIARY_NO = #{diaryNo}
						)
	</delete>
	
	<delete id="resetDiaryImg" parameterType="hashmap">
		DELETE FROM DIARY_IMG
		WHERE DIARY_NO = #{diaryNo}
	</delete>
	
	<update id="updateDiaryData" parameterType="hashmap">
	INSERT ALL
	<foreach collection="hastgNoList" item="hastgNo" separator=" ">
		INTO DIARY_HASTG (DIARY_NO, HASTG_NO, DIARY_HASTG_NO)
		VALUES (#{diaryNo}, #{hastgNo}, GET_DIARY_HASTG_SEQ_NEXTVAL)
	</foreach>
	<foreach collection="diaryImgList" item="diaryImgData" separator=" ">
		INTO DIARY_IMG (IMG_NO, DIARY_NO, IMG_URL)
		VALUES (GET_DIARY_IMG_SEQ_NEXTVAL, #{diaryNo}, #{diaryImgData.diaryImgUrl})
		<foreach collection="diaryImgData.itemTaglist" item="itemTagData" separator=" ">
			INTO ITEM_TAG
			VALUES (GET_ITEM_TAG_SEQ_NEXTVAL, #{itemTagData.marketNo}, #{itemTagData.itemsNo}, GET_DIARY_IMG_SEQ_CURRVAL,
					#{itemTagData.cost}, #{itemTagData.buyQnt}, #{itemTagData.marketName}, #{itemTagData.itemsName})
			<if test="itemTagData.addToAccbkFlag eq 1">
			INTO ACCBK (ACCBK_NO, MEMBER_NO, MARKET_NO, ITEMS_NO, COST, BUY_QNT, BUY_DATE, MARKET_NAME, ITEMS_NAME)
			VALUES (GET_ACCBK_SEQ_NEXTVAL, #{memberNo}, #{itemTagData.marketNo}, #{itemTagData.itemsNo},
					#{itemTagData.cost}, #{itemTagData.buyQnt}, #{itemTagData.buyDate}, #{itemTagData.marketName}, #{itemTagData.itemsName})
			</if>
		</foreach>
	</foreach>
	SELECT * FROM DUAL
	</update>
	
	<update id="updateDiaryCon" parameterType="hashmap">
		UPDATE DIARY SET CON = #{con}
		WHERE DIARY_NO = #{diaryNo}
	</update>
</mapper>